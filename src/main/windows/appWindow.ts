import { BrowserWindow, screen, app } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// import { join } from 'path';
import windowStateKeeper from 'electron-window-state';

import winIcon from '../assets/icon.ico'

import macIcon from '../assets/icon.png'

// const icon = winIcon.resize({ width: 16, height: 16 });

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const appWindow = (): BrowserWindow | null => {
  const { height, width } = screen.getPrimaryDisplay().workAreaSize;
  const winState = windowStateKeeper({
    defaultWidth: width,
    defaultHeight: height,
  });
  let mainWindow: BrowserWindow | null = new BrowserWindow({
    width: winState.width,
    height: winState.height,
    x: winState.x,
    y: winState.y,
    show: false,
    autoHideMenuBar: true,
    ...(process.platform === 'linux' ? { icon: macIcon } : { icon: winIcon}),

    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: false,
    },

    title: 'Wifi Share',
  });

  mainWindow.on('ready-to-show', () => {
    mainWindow?.show();
  });
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  mainWindow.webContents.openDevTools();
  console.log(app.isPackaged);

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  winState.manage(mainWindow);
  // const getTheLock = app.requestSingleInstanceLock();
  // if (!getTheLock) {
  //   app.quit();
  // } else {
  //   app.on('second-instance', () => {
  //     if (mainWindow) {
  //       if (mainWindow.isMinimized()) {
  //         mainWindow.restore();
  //       }
  //       mainWindow.focus();
  //     }
  //   });
  // }
  return mainWindow;
};

export default appWindow;
