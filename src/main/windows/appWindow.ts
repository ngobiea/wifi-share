import { BrowserWindow, app, screen, shell, } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
import windowStateKeeper from 'electron-window-state';


// const icon = winIcon.resize({ width: 16, height: 16 });
console.log(process.resourcesPath);
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const appWindow = (): BrowserWindow | null => {

  
  const { height, width } = screen.getPrimaryDisplay().workAreaSize;
  const winState = windowStateKeeper({
    defaultWidth: width,
    defaultHeight: height,
  });
  let mainWindow: BrowserWindow | null = new BrowserWindow({
    width: winState.width,
    height: winState.height,
    x: winState.x,
    y: winState.y,
    show: false,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: false,
    },
    title: 'Wifi Share',
  });

  mainWindow.on('ready-to-show', () => {
    mainWindow?.show();
  });
  mainWindow.on('closed', () => {
    mainWindow = null;
  });
    mainWindow.webContents.setWindowOpenHandler((details) => {
      shell.openExternal(details.url);
      return { action: 'deny' };
    });

  // mainWindow.webContents.openDevTools();

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  winState.manage(mainWindow);
  const getTheLock = app.requestSingleInstanceLock();
  if (!getTheLock) {
    app.quit();
  } else {
    app.on('second-instance', () => {
      if (mainWindow) {
        if (mainWindow.isMinimized()) {
          mainWindow.restore();
        }
        mainWindow.focus();
      }
    });
  }
  return mainWindow;
};

export default appWindow;
